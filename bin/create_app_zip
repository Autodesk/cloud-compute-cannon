#!/usr/bin/env bash
#Package up the required files for the internal build process
#and push to S3

set -ev

if [ -z "$1" ]; then
	CONFIG_PATH="etc/config/serverconfig.template.yaml"
else
	CONFIG_PATH="$1"
fi

NPM_VERSION=$(cat package.json \
  | grep version \
  | head -1 \
  | awk -F: '{ print $2 }' \
  | sed 's/[",]//g' \
  | tr -d '[[:space:]]')

GIT_TAG=`git rev-parse HEAD`
if [ ! -z "$TRAVIS_COMMIT" ]; then
	GIT_TAG=$TRAVIS_COMMIT
fi
GIT_TAG=${GIT_TAG:0:8}

START_DIR=$PWD
mkdir -p build

for VERSION in $GIT_TAG $NPM_VERSION ; do
	echo "VERSION=$VERSION"
	cd $START_DIR
	ZIP_NAME=ccc_docker_compose-$VERSION.zip
	ZIP_DIR="build/appzip/$VERSION"
	ZIP_FILE=$START_DIR/build/$ZIP_NAME
	rm -rf $ZIP_DIR
	rm -rf $ZIP_FILE
	mkdir -p $ZIP_DIR

	cp docker-compose.core.yml $ZIP_DIR/
	cp docker-compose.yml $ZIP_DIR/

	cp docker-compose.prod.yml $ZIP_DIR/
	cp -r etc $ZIP_DIR/

	#configuration packed with the artifacts
	cp $CONFIG_PATH $ZIP_DIR/ccc.yml

	#Script to run the stack
	cp bin/run-stack-prod $ZIP_DIR/

	echo "$VERSION" > $ZIP_DIR/VERSION

	#Bake in the version since the quay.io image has already been uploaded
	sed -i -e "s/\${VERSION}/$VERSION/g" $ZIP_DIR/docker-compose.prod.yml

	#Create the zip
	cd $ZIP_DIR
	zip -r $ZIP_FILE .
	if [ ! -z "$AWS_ACCESS_KEY_ID" ] && [ ! -z "$AWS_SECRET_ACCESS_KEY" ]; then
		#Package up the required files prod docker compose launch
		#run the aws cli with the env vars and push the file to S3
		docker run --rm -it -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -v $ZIP_FILE:/tmp/$ZIP_NAME docker.io/garland/aws-cli-docker aws s3 cp /tmp/$ZIP_NAME s3://ccc-public-storage/cloud-compute-cannon/versions/$ZIP_NAME
	fi
done

