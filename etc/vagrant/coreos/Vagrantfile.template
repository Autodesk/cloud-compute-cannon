## Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
#VAGRANTFILE_API_VERSION = "2"
#
#Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
#  config.vm.box = "phusion-open-ubuntu-14.04-amd64"
#  config.vm.box_url = "https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-vbox.box"
#
#  config.vm.provider :vmware_fusion do |f, override|
#    override.vm.box_url = "https://oss-binaries.phusionpassenger.com/vagrant/boxes/latest/ubuntu-14.04-amd64-#vmwarefusion.box"
#  end
#
#  # Only run the provisioning on the first 'vagrant up'
#  if Dir.glob("#{File.dirname(__FILE__)}/.vagrant/machines/default/*/id").empty?
#    # Install Docker
#    pkg_cmd = "wget -q -O - https://get.docker.io/gpg | apt-key add -;" \
#      "echo deb http://get.docker.io/ubuntu docker main > /etc/apt/sources.list.d/docker.list;" \
#      "apt-get update -qq; apt-get install -q -y --force-yes lxc-docker; "
#    # Add vagrant user to the docker group
#    pkg_cmd << "usermod -a -G docker vagrant; "
#    config.vm.provision :shell, :inline => pkg_cmd
#  end
#end





























$instance_name = "::name::"
$ip = "::ip::"
$update_channel = "alpha"
$image_version = "current"
$enable_serial_logging = false
$share_home = false
$vm_gui = false
$vm_memory = 1024
$vm_cpus = 1

Vagrant.configure("2") do |config|
  # always use Vagrants insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-%s" % $update_channel
  if $image_version != "current"
      config.vm.box_version = $image_version
  end
  config.vm.box_url = "http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json" % [$update_channel, $image_version]

 config.vm.provider :virtualbox do |v|
   # On VirtualBox, we don't have guest additions or a functional vboxsf
   # in CoreOS, so tell Vagrant that so it can be smarter.
   v.check_guest_additions = false
   v.functional_vboxsf     = false
 end

 # plugin conflict
 if Vagrant.has_plugin?("vagrant-vbguest") then
   config.vbguest.auto_update = false
 end

 config.vm.network "private_network", ip: "::ip::"
 # Enable ssh forward agent
 config.ssh.forward_agent = true

end