{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "(v1.0.0) Create a Cloud-Compute-Cannon stack with AWS CloudFormation ",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "AvailabilityZone": {
      "Description": "Availability Zone of the stack",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "ConstraintDescription": "must be the name of an AWS AvailabilityZone"
    },
    "StackName": {
      "Description": "Name of this CCC stack",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "CCCWorkerCapacity": {
      "Default": "1",
      "Description": "The initial number of CCC Worker instances",
      "Type": "Number",
      "MinValue": "1",
      "MaxValue": "5",
      "ConstraintDescription": "must be between 1 and 5 EC2 instances."
    },
    "InstanceType": {
      "Description": "CCC Worker EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": ["t2.medium","t2.large","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.medium","m3.large","m3.xlarge","m3.2xlarge","m4.large","m4.xlarge","m4.2xlarge","m4.4xlarge","m4.10xlarge","c1.medium","c1.xlarge","c3.large","c3.xlarge","c3.2xlarge","c3.4xlarge","c3.8xlarge","c4.large","c4.xlarge","c4.2xlarge","c4.4xlarge","c4.8xlarge","g2.2xlarge","g2.8xlarge","r3.large","r3.xlarge","r3.2xlarge","r3.4xlarge","r3.8xlarge","i2.xlarge","i2.2xlarge","i2.4xlarge","i2.8xlarge","d2.xlarge","d2.2xlarge","d2.4xlarge","d2.8xlarge","hi1.4xlarge","hs1.8xlarge","cr1.8xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription": "must be a valid EC2 instance type. Smaller instances will be unable to process jobs with large RAM/storage requirements"
    },
    "NATInstanceType" : {
      "Description" : "NET Device EC2 instance type",
      "Type" : "String",
      "Default" : "m1.small",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","m3.xlarge","m3.2xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "UpdateLastStackUpdateDate" : {
      "Description": "DELETE ME The date for the most recent security patch application.",
      "Type" : "String",
      "AllowedPattern": "[0-9]{2}-[A-Za-z]{3}-[0-9]{4} [0-9]{2}:[0-9]{2}",
      "Default": "01-Jan-1970 00:00",
      "ConstraintDescription": "String for date or datetime of last update being made. Syntax is: dd-mmm-yyyy hh:mm. Defaults to 01-Jan-1970 00:00"
    },
    "UpdateAppBuildNumber" : {
      "Description": "The build number to associate with the application build deployed to this image.",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "32",
      "Default": "0",
      "AllowedPattern": "[A-Za-z0-9_.-]+"
    }
  },

  "Mappings": {
    "Settings" : {
      "app-root"            : { "Value"    : "/ccc"},

      "version-docker"          : { "stable"   : "1.11.2",  "latest"    : "1.12.6" },
      "version-compose"         : { "stable"   : "1.7.1",   "latest"    : "1.8.0"   },
      "docker-logdriver"        : { "Value"    : "jsonfile"},
      "docker-debug"            : { "Value"    : "false"},

      "docker-logdriver-opts"   : {
                                    "jsonfile" : " --log-driver=json-file {{{logdriver-json-opts}}} ",
                                    "awslogs"  : " --log-driver=awslogs {{{logdriver-awslogs-opts}} ",
                                    "fluentd"  : " --log-driver=fluentd {{{logdriver-fluent-opts}}} "
                                  }
    },
    "AWSInstanceType2Arch": {"t1.micro":{"Arch":"PV64"},"t2.nano":{"Arch":"HVM64"},"t2.micro":{"Arch":"HVM64"},"t2.small":{"Arch":"HVM64"},"t2.medium":{"Arch":"HVM64"},"t2.large":{"Arch":"HVM64"},"m1.small":{"Arch":"PV64"},"m1.medium":{"Arch":"PV64"},"m1.large":{"Arch":"PV64"},"m1.xlarge":{"Arch":"PV64"},"m2.xlarge":{"Arch":"PV64"},"m2.2xlarge":{"Arch":"PV64"},"m2.4xlarge":{"Arch":"PV64"},"m3.medium":{"Arch":"HVM64"},"m3.large":{"Arch":"HVM64"},"m3.xlarge":{"Arch":"HVM64"},"m3.2xlarge":{"Arch":"HVM64"},"m4.large":{"Arch":"HVM64"},"m4.xlarge":{"Arch":"HVM64"},"m4.2xlarge":{"Arch":"HVM64"},"m4.4xlarge":{"Arch":"HVM64"},"m4.10xlarge":{"Arch":"HVM64"},"c1.medium":{"Arch":"PV64"},"c1.xlarge":{"Arch":"PV64"},"c3.large":{"Arch":"HVM64"},"c3.xlarge":{"Arch":"HVM64"},"c3.2xlarge":{"Arch":"HVM64"},"c3.4xlarge":{"Arch":"HVM64"},"c3.8xlarge":{"Arch":"HVM64"},"c4.large":{"Arch":"HVM64"},"c4.xlarge":{"Arch":"HVM64"},"c4.2xlarge":{"Arch":"HVM64"},"c4.4xlarge":{"Arch":"HVM64"},"c4.8xlarge":{"Arch":"HVM64"},"g2.2xlarge":{"Arch":"HVMG2"},"g2.8xlarge":{"Arch":"HVMG2"},"r3.large":{"Arch":"HVM64"},"r3.xlarge":{"Arch":"HVM64"},"r3.2xlarge":{"Arch":"HVM64"},"r3.4xlarge":{"Arch":"HVM64"},"r3.8xlarge":{"Arch":"HVM64"},"i2.xlarge":{"Arch":"HVM64"},"i2.2xlarge":{"Arch":"HVM64"},"i2.4xlarge":{"Arch":"HVM64"},"i2.8xlarge":{"Arch":"HVM64"},"d2.xlarge":{"Arch":"HVM64"},"d2.2xlarge":{"Arch":"HVM64"},"d2.4xlarge":{"Arch":"HVM64"},"d2.8xlarge":{"Arch":"HVM64"},"hi1.4xlarge":{"Arch":"HVM64"},"hs1.8xlarge":{"Arch":"HVM64"},"cr1.8xlarge":{"Arch":"HVM64"},"cc2.8xlarge":{"Arch":"HVM64"}},
    "AWSInstanceType2NATArch": {"t1.micro":{"Arch":"NATPV64"},"t2.nano":{"Arch":"NATHVM64"},"t2.micro":{"Arch":"NATHVM64"},"t2.small":{"Arch":"NATHVM64"},"t2.medium":{"Arch":"NATHVM64"},"t2.large":{"Arch":"NATHVM64"},"m1.small":{"Arch":"NATPV64"},"m1.medium":{"Arch":"NATPV64"},"m1.large":{"Arch":"NATPV64"},"m1.xlarge":{"Arch":"NATPV64"},"m2.xlarge":{"Arch":"NATPV64"},"m2.2xlarge":{"Arch":"NATPV64"},"m2.4xlarge":{"Arch":"NATPV64"},"m3.medium":{"Arch":"NATHVM64"},"m3.large":{"Arch":"NATHVM64"},"m3.xlarge":{"Arch":"NATHVM64"},"m3.2xlarge":{"Arch":"NATHVM64"},"m4.large":{"Arch":"NATHVM64"},"m4.xlarge":{"Arch":"NATHVM64"},"m4.2xlarge":{"Arch":"NATHVM64"},"m4.4xlarge":{"Arch":"NATHVM64"},"m4.10xlarge":{"Arch":"NATHVM64"},"c1.medium":{"Arch":"NATPV64"},"c1.xlarge":{"Arch":"NATPV64"},"c3.large":{"Arch":"NATHVM64"},"c3.xlarge":{"Arch":"NATHVM64"},"c3.2xlarge":{"Arch":"NATHVM64"},"c3.4xlarge":{"Arch":"NATHVM64"},"c3.8xlarge":{"Arch":"NATHVM64"},"c4.large":{"Arch":"NATHVM64"},"c4.xlarge":{"Arch":"NATHVM64"},"c4.2xlarge":{"Arch":"NATHVM64"},"c4.4xlarge":{"Arch":"NATHVM64"},"c4.8xlarge":{"Arch":"NATHVM64"},"g2.2xlarge":{"Arch":"NATHVMG2"},"g2.8xlarge":{"Arch":"NATHVMG2"},"r3.large":{"Arch":"NATHVM64"},"r3.xlarge":{"Arch":"NATHVM64"},"r3.2xlarge":{"Arch":"NATHVM64"},"r3.4xlarge":{"Arch":"NATHVM64"},"r3.8xlarge":{"Arch":"NATHVM64"},"i2.xlarge":{"Arch":"NATHVM64"},"i2.2xlarge":{"Arch":"NATHVM64"},"i2.4xlarge":{"Arch":"NATHVM64"},"i2.8xlarge":{"Arch":"NATHVM64"},"d2.xlarge":{"Arch":"NATHVM64"},"d2.2xlarge":{"Arch":"NATHVM64"},"d2.4xlarge":{"Arch":"NATHVM64"},"d2.8xlarge":{"Arch":"NATHVM64"},"hi1.4xlarge":{"Arch":"NATHVM64"},"hs1.8xlarge":{"Arch":"NATHVM64"},"cr1.8xlarge":{"Arch":"NATHVM64"},"cc2.8xlarge":{"Arch":"NATHVM64"}},
    "AWSRegionArch2AMI": {"us-east-1":{"PV64":"ami-2a69aa47","HVM64":"ami-6869aa05","HVMG2":"ami-bb18efad"},"us-west-2":{"PV64":"ami-7f77b31f","HVM64":"ami-7172b611","HVMG2":"ami-31912f51"},"us-west-1":{"PV64":"ami-a2490dc2","HVM64":"ami-31490d51","HVMG2":"ami-0a9dcf6a"},"eu-west-1":{"PV64":"ami-4cdd453f","HVM64":"ami-f9dd458a","HVMG2":"ami-873e61e1"},"eu-west-2":{"PV64":"NOT_SUPPORTED","HVM64":"ami-886369ec","HVMG2":"NOT_SUPPORTED"},"eu-central-1":{"PV64":"ami-6527cf0a","HVM64":"ami-ea26ce85","HVMG2":"ami-a16ba4ce"},"ap-northeast-1":{"PV64":"ami-3e42b65f","HVM64":"ami-374db956","HVMG2":"ami-6b443f0c"},"ap-northeast-2":{"PV64":"NOT_SUPPORTED","HVM64":"ami-2b408b45","HVMG2":"NOT_SUPPORTED"},"ap-southeast-1":{"PV64":"ami-df9e4cbc","HVM64":"ami-a59b49c6","HVMG2":"ami-1c0ba17f"},"ap-southeast-2":{"PV64":"ami-63351d00","HVM64":"ami-dc361ebf","HVMG2":"ami-bf0d0adc"},"ap-south-1":{"PV64":"NOT_SUPPORTED","HVM64":"ami-ffbdd790","HVMG2":"ami-6135440e"},"us-east-2":{"PV64":"NOT_SUPPORTED","HVM64":"ami-f6035893","HVMG2":"NOT_SUPPORTED"},"ca-central-1":{"PV64":"NOT_SUPPORTED","HVM64":"ami-730ebd17","HVMG2":"NOT_SUPPORTED"},"sa-east-1":{"PV64":"ami-1ad34676","HVM64":"ami-6dd04501","HVMG2":"NOT_SUPPORTED"},"cn-north-1":{"PV64":"ami-77559f1a","HVM64":"ami-8e6aa0e3","HVMG2":"NOT_SUPPORTED"}},
    "Region2Principal": {"us-east-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"us-west-2":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"us-west-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"eu-west-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"eu-west-2":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ap-southeast-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ap-northeast-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ap-northeast-2":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ap-southeast-2":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ap-south-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"us-east-2":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"ca-central-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"sa-east-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"},"cn-north-1":{"EC2Principal":"ec2.amazonaws.com.cn","OpsWorksPrincipal":"opsworks.amazonaws.com.cn"},"eu-central-1":{"EC2Principal":"ec2.amazonaws.com","OpsWorksPrincipal":"opsworks.amazonaws.com"}},
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.0.0.0/16" },
      "Public1"  : { "CIDR" : "10.0.0.0/24" },
      "Public2"  : { "CIDR" : "10.0.1.0/24" },
      "Private" : { "CIDR" : "10.0.1.0/24" }
    },
    "AWSNATAMI" :{"us-east-1":{"AMI":"ami-c6699baf"},"us-west-2":{"AMI":"ami-52ff7262"},"us-west-1":{"AMI":"ami-3bcc9e7e"},"eu-west-1":{"AMI":"ami-0b5b6c7f"},"ap-southeast-1":{"AMI":"ami-02eb9350"},"ap-southeast-2":{"AMI":"ami-ab990e91"},"ap-northeast-1":{"AMI":"ami-14d86d15"},"sa-east-1":{"AMI":"ami-0439e619"}}
  },
  "Resources": {
    "VPC": {
       "Type" : "AWS::EC2::VPC",
       "Properties" : {
          "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ]},
          "EnableDnsSupport" : true,
          "EnableDnsHostnames" : false,
          "InstanceTenancy" : "default",
          "Tags" : [
            { "Key" : "Name", "Value" : "CCC_VPC"},
            { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
            { "Key" : "Network", "Value" : "Public" }
          ]
       }
    },
    "PublicSubnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public1", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicSubnet2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "AvailabilityZone" : { "Fn::Select" : [ "1", { "Fn::GetAZs" : "" } ] },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public2", "CIDR" ]},
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "GatewayToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "InternetGatewayId" : { "Ref" : "InternetGateway" }
       }
    },
    "PublicRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "PublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "GatewayToInternet",
      "Properties" : {
        "RouteTableId" : { "Ref" : "PublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },
    "PublicSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "RouteTableId" : { "Ref" : "PublicRouteTable" }
      }
    },
    "PublicNetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "Tags" : [
          { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId" } },
          { "Key" : "Network", "Value" : "Public" }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "80", "To" : "80" }
      }
    },

    "InboundHTTPSPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "101",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "443", "To" : "443" }
      }
    },
    "OutboundPublicNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" },
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : { "From" : "0", "To" : "65535" }
      }
    },
    "PublicSubnetNetworkAclAssociation" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnet1" },
        "NetworkAclId" : { "Ref" : "PublicNetworkAcl" }
      }
    },
    "FrontendSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Allow access from load balancer and bastion as well as outbound HTTP and HTTPS traffic",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "9000", "SourceSecurityGroupId" : { "Ref" : "PublicLoadBalancerSecurityGroup" } }
        ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" } ,
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" } ]
      }
    },
    "PublicLoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Public ELB Security Group with HTTP access on port 80 from the internet",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "9000", "CidrIp" : "0.0.0.0/0"} ],
        "SecurityGroupEgress" : [ { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"} ]
      }
    },
    "RedisSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Private ELB Security Group with HTTP access on port 80 from the Frontend Fleet only",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [ { "IpProtocol" : "tcp", "FromPort" : "6379", "ToPort" : "6379", "SourceSecurityGroupId" : { "Ref" : "FrontendSecurityGroup" } } ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "6379",  "ToPort" : "6379",  "CidrIp" : "0.0.0.0/0" }
         ]
      }
    },
    "RedisSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnet group for the redis cluster",
        "SubnetIds" : [ { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" } ]
      }
    },
    "RedisSubnetGroup" : {
      "Type" : "AWS::ElastiCache::SubnetGroup",
      "Properties" : {
        "Description" : "Subnet group for the redis cluster",
        "SubnetIds" : [ { "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" } ]
      }
    },
    "RedisCluster": {
      "Type" : "AWS::ElastiCache::CacheCluster",
      "DependsOn" : ["VPC", "RedisSecurityGroup", "RedisSubnetGroup"],
      "Properties" : {
          "CacheNodeType" : "cache.t2.medium",
          "ClusterName" : "CCCRedisCache",
          "Engine" : "redis",
          "EngineVersion" : "3.2.4",
          "NumCacheNodes" : 1,
          "Port" : 6379,
          "Tags" : [],
          "CacheSubnetGroupName" : { "Ref" : "RedisSubnetGroup" },
          "VpcSecurityGroupIds" : [{ "Ref" : "RedisSecurityGroup" }]
      }
    },
    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "DependsOn" : "VPC",
      "Properties": {
        "SecurityGroups" : [ { "Ref" : "PublicLoadBalancerSecurityGroup" }, { "Ref" : "RedisSecurityGroup" } ],
        "Subnets" : [ { "Ref" : "PublicSubnet1" } ],
        "CrossZone": "true",
        "LBCookieStickinessPolicy": [
          {
            "PolicyName": "CookieBasedPolicy",
            "CookieExpirationPeriod": "30"
          }
        ],
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP",
            "PolicyNames": [
              "CookieBasedPolicy"
            ]
          }
        ],
        "HealthCheck": {
          "Target": "HTTP:80/",
          "HealthyThreshold": "2",
          "UnhealthyThreshold": "5",
          "Interval": "10",
          "Timeout": "5"
        }
      }
    },
    "CCCWorkerGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": {
          "Fn::GetAZs": ""
        },
        "LaunchConfigurationName": {
          "Ref": "LaunchConfig"
        },
        "VPCZoneIdentifier" : [{ "Ref" : "PublicSubnet1" }, { "Ref" : "PublicSubnet2" }],
        "MinSize": "1",
        "MaxSize": "2",
        "DesiredCapacity": {
          "Ref": "CCCWorkerCapacity"
        },
        "LoadBalancerNames": [
          {
            "Ref": "ElasticLoadBalancer"
          }
        ]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M",
          "Count": {
            "Ref": "CCCWorkerCapacity"
          }
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime": "PT15M",
          "WaitOnResourceSignals": "true"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "2481956f-940e-46b4-8cd0-1c3366c918aa"
        }
      }
    },
    "LaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "Comment1": "Install docker and configure redis address",
        "AWS::CloudFormation::Init": {
          "comment01":"The fluentd daemon needs to be de-parameterized, or have the config and gems added manuall",
          "configSets": {

              "cfg_host_install_fluent"       : [ "update_repo_with_fluent", "install_fluent_pkg",  { "ConfigSet" : "cfg_host_update_fluent_config" } ],
              "cfg_host_update_fluent_config" : [ "install_fluent_plugins", "test_update_fluent_config", "update_fluent_config" ],O






              "DoAppRestart"                  : [ { "ConfigSet" : "DoAppStop" }, { "ConfigSet" : "DoAppStart" } ] ,
              "DoAppUpdate"                   : [ { "ConfigSet" : "cfg_app_check_dir" }, "stop_app", "backup_app_files", "brand_image", "write_app_commands", "update_app_files", "start_app" ],
              "DoAppStop"                     : [ { "ConfigSet" : "cfg_app_check_dir" }, "stop_app" ],
              "DoAppStart"                    : [ { "ConfigSet" : "cfg_app_check_dir" }, "start_app" ],

              "DoHostLogConfigUpdate"         : [ { "ConfigSet" : "cfg_host_update_fluent_config" } ],
              "DoHostDockerConfigUpdate"      : [ { "ConfigSet" : "cfg_host_update_docker_config" } ],

              "DoHostSecurityUpdate"          : [ { "ConfigSet" : "cfg_host_security_update" } ],
              "DoHostReboot"                  : [ { "ConfigSet" : "cfg_host_reboot" } ],
              "DoHostUpdateAll"               : [ { "ConfigSet" : "cfg_host_all_update" } ],

              "DoHostClearErrors"             : [ "reset_host_update_cache" ],

              "DoTests"                       : [  "run_test" ],

              "DoHostSetup"                   : [ { "ConfigSet" : "cfg_host_install_base" }, { "ConfigSet" : "cfg_host_install_docker" }, { "ConfigSet" : "cfg_host_install_fluent" },  { "ConfigSet" : "cfg_host_update_docker_config" }, { "ConfigSet" : "cfg_host_security_update" } ],

              "cfg_app_check_dir"             : [ "check_app_dir" ],

              "cfg_host_install_base"         : [ "brand_image", "install_cfn-hup", "install_aws_logs", "install_aws_cli" ],
              "cfg_host_install_docker"       : [ "install_docker_pkg", "install_compose", "install_quay_robot_credentials"  ],
              "cfg_host_update_docker_config" : [ "update_docker_config" ],

              "cfg_host_security_update"      : [ "update_security" ],

              "cfg_host_all_update"           : [ "update_all" ],
              "cfg_host_reboot"               : [ "do_reboot" ]

          },


          "check_app_dir" : {

            "commands": {

              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for check_app_dir. AppBuildNumber =", { "Ref" : "UpdateAppBuildNumber" },  "Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },

              "01_check_app_dir": {
                "command" : { "Fn::Join": [ "", [
                    "#!/bin/bash -xev\n",
                    "#MCheck that app directories exist and have correct perms\n",
                    "#Assume that app backup has already occurred\n",
                    "#NOTE directory structure is: /data2/app/MyApp (root) /data2/app/MyApp/prev (most recent backup copy)\n",
                    "mkdir -p ", {"Fn::FindInMap"  : [ "Settings", "app-root", "Value" ] } , "\n",
                    "chown -R root:docker ", {"Fn::FindInMap"  : [ "Settings", "app-root", "Value" ] } , "\n",
                    "\n"
                    ]
                  ]
                }
              }

            }
          },



          "update_repo_with_fluent": {

            "files" : {
                "/etc/yum.repos.d/td.repo" : {
                  "content" : { "Fn::Join" : ["", [
                    "[treasuredata]\n",
                    "name=TreasureData\n",
                    "baseurl=http://packages.treasuredata.com/2/redhat/\\$releasever/\\$basearch\n",
                    "gpgcheck=1\n",
                    "gpgkey=https://packages.treasuredata.com/GPG-KEY-td-agent\n",
                    "\n"
                  ]]},
                  "mode"   : "000644",
                  "owner"  : "root",
                  "group"  : "root"
                }
            },

            "commands": {
              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for update_repo_with_fluent. Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },

              "01_update_yum_repo_with_fluent": {
                "command" : { "Fn::Join": [ "", [
                    "#!/bin/bash -xv                                                                                                  \n",

                    "# Script to update rpm for td-agent                                                                              \n",
                    "# These steps borrowed from this script: https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh        \n",
                    "# add GPG key                                                                                                    \n",
                    "rpm --import https://packages.treasuredata.com/GPG-KEY-td-agent                                                  \n",

                    "# update your sources                                                                                            \n",
                    "yum check-update          || true                                                                                \n",


                    "# We are okay if we get here \n",

                    "\n"
                    ]
                  ]
                }
              }
            }

          },

          "install_fluent_pkg": {
            "packages": {
              "yum": { "td-agent": [] }
            },

            "commands": {
              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for install_fluent_pkg. Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },

              "01_td-agent_to_groups": {
                "command": { "Fn::Join": [ "", [

                    "# add td-agent to docker group                                                                                   \n",
                    "usermod -a -G docker td-agent                                                                                    \n",

                    "\n"
                    ]
                  ]
                }
              },
              "03_get_td-agent_version": {
                "command" : "td-agent --version"
              }
            }

          },


          "install_fluent_plugins": {
            "TODO":"remove the hard coded s3 plugin list",
            "files" : {
                "/etc/td-agent/plugins.list" : {
                "source"  : { "Fn::Join" : ["", [ "https://s3-us-west-1.amazonaws.com/",
                                                  {"Fn::FindInMap" : [ "Settings", "s3-bucket-configs", "Value" ] },
                                                  "/logging",
                                                  "/",
                                                  "plugins.list"  ]]},
                "context" : {

                    "NonProd"         : { "Fn::If" : [ "NonProd", true, false ]},
                    "Environment"     : { "Ref" : "EnvironmentType"},

                    "ESAddress"       : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "address" ] },
                    "ESRegion"        : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "region" ] },

                    "aws-region"      : { "Ref" : "AWS::Region" }
                },

                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "td-agent"
              }
            },

            "commands": {
              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for install_fluent_plugins. Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },

              "01_update_td-agent_branding": {
                "command": { "Fn::Join": [ "", [

                    "# allow same 'brand_image' env variables to be accessible to td-agent                                            \n",
                    "cp /etc/profile.d/bnr-branding.sh /etc/sysconfig/td-agent                                                        \n",
                    "chown td-agent:root /etc/sysconfig/td-agent                                                                      \n",

                    "\n"
                    ]
                  ]
                }
              },

              "05_get_td-agent_version": {
                "command" : "td-agent --version"
              },

              "07_install_td-agent_plugins": {
                "command" : { "Fn::Join": [ "", [
                    "#!/bin/bash -xv                                                                                \n",
                    "#set working directory                                                                         \n",
                    "cd /etc/td-agent/                                                                              \n",

                    "# ASSUME td-agent already installed                                                            \n",
                    "# Install td-agent gem plugins                                                                 \n",

                    "td-agent-gem install $(cat plugins.list)                                                       \n",
                    "td-agent-gem list --local                                                                      \n",

                    "# Plugins are live once installed. No need for restart.                                        \n",

                    "# We are okay if we get here \n",

                    "\n"
                    ]
                  ]
                }
              }
            }
          },


          "test_update_fluent_config": {

            "files" : {

              "/etc/td-agent/td-agent.conf.new" : {
                "source"  : { "Fn::Join" : ["", [ "https://s3-us-west-1.amazonaws.com/",
                                                  {"Fn::FindInMap" : [ "Settings", "s3-bucket-configs", "Value" ] },
                                                  "/logging",
                                                  "/",
                                                  "td-agent.conf"  ]]},
                "context" : {

                    "NonProd"         : { "Fn::If" : [ "NonProd", true, false ]},
                    "Environment"     : { "Ref" : "EnvironmentType"},

                    "ESAddress"       : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "address" ] },
                    "ESRegion"        : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "region" ] },

                    "aws-region"      : { "Ref" : "AWS::Region" }
                },

                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "td-agent"
              }
            },

            "commands": {
              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for test_update_fluent_config. Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },


              "07_test_updated_td-agent_config": {
                "command" : { "Fn::Join": [ "", [
                    "#!/bin/bash -xev                                                                               \n",
                    "#set working directory                                                                         \n",
                    "cd /etc/td-agent/                                                                              \n",
                    "errCode=0                                                                                      \n",

                    "# ASSUME new td-agent.conf.new file already updated and in place                               \n",

                    "# NOTE Some errors, such as referencing invalid plugins will not results in non-0 exit code    \n",
                    "# So check two different ways                                                                  \n",
                    "td-agent --dry-run -c /etc/td-agent/td-agent.conf.new  > td-agent.conf.new.results             \n",

                    "if [ $? -ne 0 ]; then                                                                          \n",
                    "    errCode=1                                                                                  \n",
                    "else                                                                                           \n",
                    "    grep error td-agent.conf.new.results                                                       \n",
                    "    if [ $? -ne 1 ]; then                                                                      \n",
                    "       errCode=1                                                                               \n",
                    "       cat td-agent.conf.new.results                                                           \n",
                    "    fi                                                                                         \n",
                    "fi                                                                                             \n",

                    "if [ $errCode -ne 0 ]; then                                                                     \n",
                    "   echo 'td-agent -c /etc/td-agent/td-agent.conf.new' failed, reverting change....             \n",
                    "   mv -f td-agent.conf.new td-agent.conf.new.bad                                               \n",
                    "   echo 'td-agent.conf.new' moved to 'td-agent.conf.new.bad'....                               \n",
                    "   exit 1                                                                                      \n",
                    "else                                                                                           \n",
                    "   echo 'td-agent.conf.new' looks good! Continuing....                                         \n",
                    "fi                                                                                             \n",

                    "# We are okay if we get here \n",

                    "\n"
                    ]
                  ]
                }
              }

            }

          },


          "update_fluent_config": {

            "files" : {

              "/etc/td-agent/td-agent.conf" : {
                "source"  : { "Fn::Join" : ["", [ "https://s3-us-west-1.amazonaws.com/",
                                                  {"Fn::FindInMap" : [ "Settings", "s3-bucket-configs", "Value" ] },
                                                  "/logging",
                                                  "/",
                                                  "td-agent.conf"  ]]},
                "context" : {

                    "NonProd"         : { "Fn::If" : [ "NonProd", true, false ]},
                    "Environment"     : { "Ref" : "EnvironmentType"},

                    "ESAddress"       : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "address" ] },
                    "ESRegion"        : {"Fn::FindInMap" : [ "ElasticsearchEndpoints", { "Ref" : "EnvironmentType"}, "region" ] },

                    "aws-region"      : { "Ref" : "AWS::Region" }
                },

                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "td-agent"
              }
            },

            "commands": {
              "00_log_preamble": {  "command" : { "Fn::Join" : [" ", [ "echo", "Command preamble for update_fluent_config. Timestamp =", { "Ref" : "UpdateLastStackUpdateDate" }  ]]}  },


              "07_update_td-agent_config": {
                "command" : { "Fn::Join": [ "", [
                    "#!/bin/bash -xev                                                                               \n",
                    "#set working directory                                                                         \n",
                    "cd /etc/td-agent/                                                                              \n",

                    "# NOTE that we only tell  CloudFormation                                                       \n",
                    "# to restart td-agent when the /etc/td-agent/td-agent.conf file changes after executing        \n",
                    "# the services section of this block. This is done to avoid unecessary restarts earlier in the \n",
                    "# sequence where the td-agent.conf is updated after fresh install.                             \n",

                    "# If we get here, we have validated and installed a new td-agent.conf file. The               \n",
                    "# 'services' block in this section will handle starting the td-agent service.                 \n",

                    "\n"
                    ]
                  ]
                }
              }

            },

            "services": {
              "sysvinit" : {
                "td-agent" : { "enabled": "true",  "ensureRunning": "true",
                               "files"  : [ "/etc/td-agent/td-agent.conf", "/etc/td-agent/plugins.list" ],
                               "packages" : { "yum" : ["td-agent"] }
                }
              }
            }
          },


























          "config": {
            "packages": {
              "yum": {
                "docker": [],
                "jq": []
              }
            },
            "commands" : {
              "00_get_redis_address" : {
                  "command" : "/usr/local/bin/get_redis_address",
                  "ignoreErrors" : "false"
              },
              "01_confirm_redis_address" : {
                  "command" : "cat /tmp/redis_host",
                  "ignoreErrors" : "false"
              },
              "02_start_docker1" : {
                  "command" : "service docker start",
                  "ignoreErrors" : "false"
              },
              "03_start_docker2" : {
                  "command" : "usermod -a -G docker ec2-user",
                  "ignoreErrors" : "false"
              },
              "04_install_and_start_ccc" : {
                  "command" : "docker run --restart always --detach --env REDIS_HOST=`cat /tmp/redis_host` --env LOG_LEVEL=10 --env ENABLE_FLUENT=false --env HOST_PWD=$PWD --env PORT=9000 -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/ccc-local-storage:/app/ccc-local-storage quay.io/bionano/cloud-compute-cannon:507d8cd6",
                  "ignoreErrors" : "false"
              }
            },
            "files": {
              "/usr/local/bin/get_redis_address": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#! /bin/bash",
                      "aws elasticache describe-cache-clusters --cache-cluster-id ",
                      {
                        "Ref": "RedisCluster"
                      },
                      " ",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      " > /tmp/redis_host",
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },

              "/etc/cfn/cfn-hup.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[main]\n",
                      "stack=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      "\n",
                      "region=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n"
                    ]
                  ]
                },
                "mode": "000400",
                "owner": "root",
                "group": "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ",
                      {
                        "Ref": "AWS::StackName"
                      },
                      "         --resource LaunchConfig ",
                      "         --region ",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "runas=root\n"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "cfn-hup": {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "InstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "# Install the files and packages from the metadata\n",
                "/opt/aws/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfig ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "# Signal the status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource CCCWorkerGroup ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    }
  }
}