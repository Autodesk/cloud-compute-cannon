{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description": "(v1.0.1) CCC scaling. Custom to bionano infrastructure",

  "Parameters": {
    "S3Bucket": {
      "Type": "String",
      "Description":"S3 bucket to use for artifacts. Just bucket Name; not URL. IAM user should have access to the bucket.",
      "Default":"bionano-devops-build-artifacts"
    },
    "S3Key": {
      "Description": "S3 key of the lambda function",
      "Type": "String",
      "MinLength": "3",
      "MaxLength": "132",
      "AllowedPattern": "[A-Za-z0-9.=+-/]+",
      "ConstraintDescription": "Must contain only letters, digits or _.=+- with no spaces"
    },
    "BionanoEnvironment": {
      "Description": "dev | qa | prod",
      "Type": "String",
      "Default": "dev",
      "AllowedValues" : ["dev", "qa", "prod"]
    }
  },

 "Mappings" : {
    "Settings": {
      "dev" : {
                "SubnetIds"        : ["subnet-a415dbd2", "subnet-522f9a36"], 
                "SecurityGroupIds" : ["sg-ab9292cc"]
              },

      "qa" : {
                "SubnetIds"        : ["subnet-698bab1f", "subnet-fca680c1"],
                "SecurityGroupIds" : ["sg-fd5efb86"]
              },

      "prod" : {
                "SubnetIds"        : ["subnet-feae88c3", "subnet-6b98b81d"], 
                "SecurityGroupIds" : ["sg-87389dfc"]
              }
    }
  },

  "Resources": {

    "LambdaCCCBionanoScaleUp" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": [ "RoleLambdaCCCBionano", "PolicyRoleLambdaCCCBionano"],
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "S3Bucket"},
          "S3Key" : { "Ref" : "S3Key"}
        },
        "Description" : "Bionano CCC scale up function",
        "Environment" : {
          "Variables" : {
            "BNR_ENVIRONMENT" : { "Ref" : "BionanoEnvironment"}
          }
        },
        "Handler" : "index.handlerScaleUp",
        "Role" : { "Fn::GetAtt":[ "RoleLambdaCCCBionano", "Arn" ] },
        "Runtime" : "nodejs4.3",
        "Timeout" : 30,
        "VpcConfig" : {
          "SecurityGroupIds" : {"Fn::FindInMap" : [ "Settings", { "Ref" : "BionanoEnvironment" }, "SecurityGroupIds" ] },
          "SubnetIds" : {"Fn::FindInMap" : [ "Settings", { "Ref" : "BionanoEnvironment" }, "SubnetIds" ] }
        }
      }
    },

    "LambdaCCCBionanoScaleDown" : {
      "Type" : "AWS::Lambda::Function",
      "DependsOn": [ "RoleLambdaCCCBionano", "PolicyRoleLambdaCCCBionano"],
      "Properties" : {
        "Code" : {
          "S3Bucket" : { "Ref" : "S3Bucket"},
          "S3Key" : { "Ref" : "S3Key"}
        },
        "Description" : "Bionano CCC scale down function",
        "Environment" : {
          "Variables" : {
            "BNR_ENVIRONMENT" : { "Ref" : "BionanoEnvironment"}
          }
        },
        "Handler" : "index.handlerScaleDown",
        "Role" : { "Fn::GetAtt":[ "RoleLambdaCCCBionano", "Arn" ] },
        "Runtime" : "nodejs4.3",
        "Timeout" : 30,
        "VpcConfig" : {
          "SecurityGroupIds" : {"Fn::FindInMap" : [ "Settings", { "Ref" : "BionanoEnvironment" }, "SecurityGroupIds" ] },
          "SubnetIds" : {"Fn::FindInMap" : [ "Settings", { "Ref" : "BionanoEnvironment" }, "SubnetIds" ] }
        }
      }
    },

    "RuleTimerScaleUp": {
      "Type" : "AWS::Events::Rule",
      "DependsOn" : "LambdaCCCBionanoScaleUp",
      "Properties" : {
        "Description" : "Fire this event every minute",
        "ScheduleExpression" : "rate(1 minute)",
        "Targets" : [
          {
            "Arn" : { "Fn::GetAtt" : [ "LambdaCCCBionanoScaleUp", "Arn" ] },
            "Id" : "TimerLambdaScaleUp"
          }
        ]
      }
    },

    "RuleTimerScaleDown": {
      "Type" : "AWS::Events::Rule",
      "DependsOn" : "LambdaCCCBionanoScaleDown",
      "Properties" : {
        "Description" : "Fire this event every 5 minutes",
        "ScheduleExpression" : "rate(1 minute)",
        "Targets" : [
          {
            "Arn" : { "Fn::GetAtt" : [ "LambdaCCCBionanoScaleDown", "Arn" ] },
            "Id" : "TimerLambdaScaleDown"
          }
        ]
      }
    },

    "PermissionInvokeLambdaScaleUp": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "RuleTimerScaleUp",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaCCCBionanoScaleUp",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RuleTimerScaleUp",
            "Arn"
          ]
        }
      }
    },

    "PermissionInvokeLambdaScaleDown": {
      "Type": "AWS::Lambda::Permission",
      "DependsOn": "RuleTimerScaleDown",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LambdaCCCBionanoScaleDown",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "RuleTimerScaleDown",
            "Arn"
          ]
        }
      }
    },

    "RoleLambdaCCCBionano" : {
      "Type":"AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["lambda.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "Path": "/"
      }
    },

    "PolicyRoleLambdaCCCBionano": {
      "DependsOn": [
        "RoleLambdaCCCBionano"
      ],
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "LambdaCCCScalePolicy",
        "Roles": [ {"Ref": "RoleLambdaCCCBionano"} ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["logs:*"],
              "Resource": ["arn:aws:logs:*:*:*"]
            },
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeInstances",
                "ec2:TerminateInstances",
                "ec2:DescribeNetworkInterfaces",
                "ec2:CreateNetworkInterface",
                "ec2:DeleteNetworkInterface",
                "autoscaling:*"
              ],
              "Resource": ["*"]
            }
          ]
        }
      }
    }
  }
}